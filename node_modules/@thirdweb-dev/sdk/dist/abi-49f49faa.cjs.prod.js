'use strict';

var custom = require('./custom-d8237170.cjs.prod.js');
var zod = require('zod');
var QueryParams = require('./QueryParams-6754e8c0.cjs.prod.js');
var generatedAbis = require('@thirdweb-dev/generated-abis');

const PropertiesInput = zod.z.object({}).catchall(zod.z.union([custom.BigNumberTransformSchema, zod.z.unknown()]));

/**
 * @internal
 */
const OptionalPropertiesInput = zod.z.union([zod.z.array(PropertiesInput), PropertiesInput]).optional();

/**
 * @internal
 */
const EditionMetadataOutputSchema = zod.z.object({
  supply: custom.BigNumberSchema,
  metadata: QueryParams.CommonNFTOutput
});

/**
 * @internal
 */
const EditionMetadataWithOwnerOutputSchema = EditionMetadataOutputSchema.extend({
  owner: zod.z.string(),
  quantityOwned: custom.BigNumberSchema
});

/**
 * @internal
 */
const EditionMetadataInputSchema = zod.z.object({
  supply: custom.BigNumberishSchema,
  metadata: QueryParams.CommonNFTInput
});

/**
 * @internal
 */
const EditionMetadataInputOrUriSchema = zod.z.object({
  supply: custom.BigNumberishSchema,
  metadata: QueryParams.NFTInputOrUriSchema
});

/**
 * @public
 */

/**
 * @internal
 */
const TokenMintInputSchema = zod.z.object({
  toAddress: custom.AddressOrEnsSchema,
  amount: QueryParams.AmountSchema
});

/**
 * @public
 */

let ProposalState = /*#__PURE__*/function (ProposalState) {
  ProposalState[ProposalState["Pending"] = 0] = "Pending";
  ProposalState[ProposalState["Active"] = 1] = "Active";
  ProposalState[ProposalState["Canceled"] = 2] = "Canceled";
  ProposalState[ProposalState["Defeated"] = 3] = "Defeated";
  ProposalState[ProposalState["Succeeded"] = 4] = "Succeeded";
  ProposalState[ProposalState["Queued"] = 5] = "Queued";
  ProposalState[ProposalState["Expired"] = 6] = "Expired";
  ProposalState[ProposalState["Executed"] = 7] = "Executed";
  return ProposalState;
}({});

function getCachedAbiForContract(address) {
  if (address in generatedAbis.GENERATED_ABI) {
    return generatedAbis.GENERATED_ABI[address];
  }
  return undefined;
}

exports.EditionMetadataInputOrUriSchema = EditionMetadataInputOrUriSchema;
exports.EditionMetadataInputSchema = EditionMetadataInputSchema;
exports.EditionMetadataOutputSchema = EditionMetadataOutputSchema;
exports.EditionMetadataWithOwnerOutputSchema = EditionMetadataWithOwnerOutputSchema;
exports.OptionalPropertiesInput = OptionalPropertiesInput;
exports.ProposalState = ProposalState;
exports.TokenMintInputSchema = TokenMintInputSchema;
exports.getCachedAbiForContract = getCachedAbiForContract;
