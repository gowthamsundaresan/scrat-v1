import { ThirdwebStorage } from "@thirdweb-dev/storage";
import { BytesLike, ethers, providers, Signer } from "ethers";
import { PreDeployMetadataFetched } from "../schema";
import { DeployedContractType, KeylessDeploymentInfo, KeylessTransaction, PrecomputedDeploymentTransaction } from "../types/any-evm/deploy-data";
import { ConstructorParamMap, ContractOptions, DeploymentPreset } from "../types/any-evm/deploy-data";
import { DeployMetadata, DeployOptions } from "../types";
export declare const CREATE2_FACTORY_BYTECODE = "0x604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3";
export declare const SIGNATURE: {
    v: number;
    r: string;
    s: string;
};
export declare const COMMON_FACTORY = "0x4e59b44847b379578588920cA78FbF26c0B4956C";
export declare const GAS_LIMIT_FOR_DEPLOYER = 5000000;
export declare const DEPLOYER_BYTECODE = "0x60806040526040516107f33803806107f383398101604081905261002291610359565b805160005b818110156100c157828181518110610041576100416104c9565b6020026020010151600001516001600160a01b03163b600014156100af576100ad838281518110610074576100746104c9565b602002602001015160200151848381518110610092576100926104c9565b6020026020010151604001516100c960201b6100091760201c565b505b806100b9816104df565b915050610027565b505050610557565b606061011183836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000081525061011860201b60201c565b9392505050565b6060610127848460008561012f565b949350505050565b6060824710156101955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161018c565b600080866001600160a01b031685876040516102089190610508565b60006040518083038185875af1925050503d8060008114610245576040519150601f19603f3d011682016040523d82523d6000602084013e61024a565b606091505b50909250905061025b828286610266565b979650505050505050565b60608315610275575081610111565b8251156102855782518084602001fd5b8160405162461bcd60e51b815260040161018c9190610524565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156102d7576102d761029f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156103055761030561029f565b604052919050565b80516001600160a01b038116811461032457600080fd5b919050565b60005b8381101561034457818101518382015260200161032c565b83811115610353576000848401525b50505050565b6000602080838503121561036c57600080fd5b82516001600160401b038082111561038357600080fd5b818501915085601f83011261039757600080fd5b8151818111156103a9576103a961029f565b8060051b6103b88582016102dd565b91825283810185019185810190898411156103d257600080fd5b86860192505b838310156104bc578251858111156103f05760008081fd5b86016060601f19828d0381018213156104095760008081fd5b6104116102b5565b61041c8b850161030d565b8152604061042b81860161030d565b828d01529284015192898411156104425760008081fd5b83850194508e603f86011261045957600093508384fd5b8b85015193508984111561046f5761046f61029f565b61047f8c84601f870116016102dd565b92508383528e818587010111156104965760008081fd5b6104a5848d8501838801610329565b8101919091528452505091860191908601906103d8565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561050157634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825161051a818460208701610329565b9190910192915050565b6020815260008251806020840152610543816040850160208701610329565b601f01601f19169190910160400192915050565b61028d806105666000396000f3fe6080604052600080fd5b606061004b83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610052565b9392505050565b60606100618484600085610069565b949350505050565b6060824710156100cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100c6565b600080866001600160a01b031685876040516101429190610208565b60006040518083038185875af1925050503d806000811461017f576040519150601f19603f3d011682016040523d82523d6000602084013e610184565b606091505b509150915061019482828661019f565b979650505050505050565b606083156101ae57508161004b565b8251156101be5782518084602001fd5b8160405162461bcd60e51b81526004016100c69190610224565b60005b838110156101f35781810151838201526020016101db565b83811115610202576000848401525b50505050565b6000825161021a8184602087016101d8565b9190910192915050565b60208152600082518060208401526102438160408501602087016101d8565b601f01601f1916919091016040019291505056fea26469706673582212200b524eb8ceaafe6c603273ee859fddbc2d6f1b7860c3d853dcf6f129f9d9371364736f6c634300080c0033";
export declare const DEPLOYER_ABI: {
    inputs: {
        components: {
            internalType: string;
            name: string;
            type: string;
        }[];
        internalType: string;
        name: string;
        type: string;
    }[];
    stateMutability: string;
    type: string;
}[];
/**
 * Check if a contract exists at the given address
 *
 * @internal
 * @param address
 * @param provider
 */
export declare function isContractDeployed(address: string, provider: providers.Provider): Promise<boolean>;
/**
 * Check if a chain enforces EIP-155 transactions
 * Ref: https://eips.ethereum.org/EIPS/eip-155
 *
 * @internal
 * @param provider
 */
export declare function isEIP155Enforced(provider: providers.Provider): Promise<boolean>;
/**
 * Get the CREATE2 Factory address for a network
 * Source code of the factory:
 * https://github.com/Arachnid/deterministic-deployment-proxy/blob/master/source/deterministic-deployment-proxy.yul
 *
 * @internal
 * @param provider
 */
export declare function getCreate2FactoryAddress(provider: providers.Provider): Promise<string>;
/**
 * Generate salt for deployment with Create2
 * Note: Salt component is generated by appending `tw` (thirdweb) to the bytecode
 *
 * @internal
 * @param bytecode: Creation bytecode of the contract to deploy
 */
export declare function getSaltHash(bytecode: string): string;
/**
 *
 * Construct init-bytecode, packed with salthash.
 * This hex data is intended to be sent to the CREATE2 factory address
 *
 * @internal
 * @param bytecode: Creation bytecode of the contract to deploy
 * @param encodedArgs: Abi-encoded constructor params
 */
export declare function getInitBytecodeWithSalt(bytecode: string, encodedArgs: BytesLike): string;
/**
 
 * Pre-compute a contract's deployment address for a CREATE2 deployment.
 *
 * @public
 * @param bytecode: Creation bytecode of the contract to deploy
 * @param encodedArgs: Abi-encoded constructor params
 * @param create2FactoryAddress
 */
export declare function computeDeploymentAddress(bytecode: string, encodedArgs: BytesLike, create2FactoryAddress: string): string;
/**
 *
 * @internal
 * @param provider
 * @param storage
 * @param create2Factory
 */
export declare function computeEOAForwarderAddress(provider: providers.Provider, storage: ThirdwebStorage, create2Factory?: string): Promise<string>;
/**
 *
 * @internal
 * @param provider
 * @param storage
 * @param create2Factory
 */
export declare function computeForwarderAddress(provider: providers.Provider, storage: ThirdwebStorage, create2Factory?: string): Promise<string>;
/**
 *
 * @internal
 * @param provider
 * @param storage
 * @param create2Factory
 */
export declare function computeCloneFactoryAddress(provider: providers.Provider, storage: ThirdwebStorage, create2Factory?: string): Promise<string>;
/**
 *
 * @internal
 * @param provider
 * @param storage
 * @param create2Factory
 */
export declare function computeNativeTokenAddress(provider: providers.Provider, storage: ThirdwebStorage, create2Factory?: string): Promise<string>;
/**
 *
 * @public
 * @param contractName
 * @param chainId
 * @param storage
 */
export declare function getThirdwebContractAddress(contractName: string, chainId: number, storage: ThirdwebStorage): Promise<string>;
/**
 *
 * @public
 * @param contractName
 * @param chainId
 * @param storage
 */
export declare function predictThirdwebContractAddress(contractName: string, chainId: number, storage: ThirdwebStorage): Promise<string>;
/**
 *
 * @internal
 * @param contractName
 * @param chainId
 * @param storage
 */
export declare function getEncodedConstructorParamsForThirdwebContract(contractName: string, chainId: number, storage: ThirdwebStorage, constructorParamMap?: ConstructorParamMap): Promise<BytesLike | undefined>;
/**
 * Generate a transaction to be sent with a keyless signer.
 *
 * @public
 * @param transaction: Unsigned transaction object
 * @param signature: Signature bytes
 */
export declare function getKeylessTxn(transaction: ethers.UnsignedTransaction, signature: string): KeylessTransaction;
/**
 * Deploy Nick's Create2 factory on a given network.
 * Deployment is keyless. Signer is needed to fund the keyless signer address.
 * Ref: https://github.com/Arachnid/deterministic-deployment-proxy
 *
 * @public
 * @param signer
 */
export declare function deployCreate2Factory(signer: Signer, options?: DeployOptions): Promise<string>;
/**
 * Deploy a contract at a deterministic address, using Create2 method
 * Address depends on the Create2 factory address.
 *
 * @public
 *
 * @param singer
 * @param bytecode
 * @param encodedArgs
 * @param create2FactoryAddress
 */
export declare function deployContractDeterministicRaw(signer: Signer, bytecode: string, encodedArgs: BytesLike, create2FactoryAddress: string, options?: DeployOptions, predictedAddress?: string, gasLimit?: number): Promise<void>;
/**
 * Deploy a contract at a deterministic address, using Create2 method
 * Address depends on the Create2 factory address.
 *
 * @public
 *
 * @param singer
 * @param bytecode
 * @param encodedArgs
 * @param create2FactoryAddress
 */
export declare function deployContractDeterministic(signer: Signer, transaction: PrecomputedDeploymentTransaction, options?: DeployOptions, gasLimit?: number): Promise<void>;
/**
 *
 * Returns txn data for keyless deploys as well as signer deploys.
 * Also provides a list of infra contracts to deploy.
 *
 * @internal
 *
 * @param metadataUri
 * @param storage
 * @param provider
 * @param create2Factory
 */
export declare function getDeploymentInfo(metadataUri: string, storage: ThirdwebStorage, provider: providers.Provider, create2Factory?: string): Promise<DeploymentPreset[]>;
export declare function deployWithThrowawayDeployer(signer: Signer, transactions: PrecomputedDeploymentTransaction[], options?: DeployOptions): Promise<void>;
export declare function computeDeploymentInfo(contractType: DeployedContractType, provider: providers.Provider, storage: ThirdwebStorage, create2Factory: string, contractOptions?: ContractOptions): Promise<DeploymentPreset>;
/**
 * @internal
 *
 * Determine constructor params required by an implementation contract.
 * Return abi-encoded params.
 */
export declare function encodeConstructorParamsForImplementation(compilerMetadata: PreDeployMetadataFetched, provider: providers.Provider, storage: ThirdwebStorage, create2Factory: string, constructorParamMap?: ConstructorParamMap): Promise<BytesLike>;
export declare function convertParamValues(constructorParamTypes: string[], constructorParamValues: any[]): any[];
/**
 *
 * @public
 * @param transaction: Unsigned transaction object
 * @param signature: Signature bytes
 */
export declare function getCreate2FactoryDeploymentInfo(chainId: number, gasPrice?: number): KeylessDeploymentInfo;
export declare function fetchAndCachePublishedContractURI(contractName: string): Promise<string>;
export declare function fetchAndCacheDeployMetadata(publishMetadataUri: string, storage: ThirdwebStorage): Promise<DeployMetadata>;
export declare function estimateGasForDeploy(initCode: string): number;
export declare function createTransactionBatches(transactions: PrecomputedDeploymentTransaction[], upperGasLimit?: number): PrecomputedDeploymentTransaction[][];
//# sourceMappingURL=any-evm-utils.d.ts.map